@model Website.Models.RoomModel

@{
    var roomId = Guid.NewGuid();
}

<tr class="row">
    @using (Html.BeginCollectionItem("Rooms"))
    {
        <td class="col-md-2">
            <div class="form-group">
                @Html.EnumDropDownListFor(model => model.Type, new { @class = "form-control item-list-changer" })
                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
            </div>
        </td>

        <td class="col-md-2">
            <div class="form-group">
                @Html.EditorFor(model => model.RoomNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RoomNumber, "", new { @class = "text-danger" })
            </div>
        </td>

        <td class="col-md-12">
            @Html.LabelFor(model => model.ShopItems, htmlAttributes: new { @class = "control-label" })
            <table class="table table-striped">
                <thead>
                    <tr class="row">
                        <th scope="col" class="col-md-6">@Html.LabelFor(model => model.ShopItems.FirstOrDefault().Items, htmlAttributes: new { @class = "control-label" })</th>
                        <th scope="col" class="col-md-2">@Html.LabelFor(model => model.ShopItems.FirstOrDefault().Quantity, htmlAttributes: new { @class = "control-label" })</th>
                        <th scope="col" class="col-md-2">@Html.LabelFor(model => model.ShopItems.FirstOrDefault().ShardPrice, htmlAttributes: new { @class = "control-label" })</th>
                        <th scope="col" class="col-md-2">
                            <input class="btn btn-primary btn-block" type="button" onclick="addShopItemToRoom(this)" value="Add ShopItem" id="@roomId" />
                        </th>
                    </tr>
                </thead>
                <tbody id="shop_item_list_@roomId">
                    @if (Model != null && Model.ShopItems != null)
                    {
                        for (var i = 0; i < Model.ShopItems.Count; i++)
                        {
                            Html.RenderPartial("ShopItemPartial", Model.ShopItems[i]);
                        }
                    }
                </tbody>
            </table>
        </td>
        <td class="col-md-12">
            @Html.LabelFor(model => model.Enemies, htmlAttributes: new { @class = "control-label" })
            <table class="table table-striped">
                <thead>
                    <tr class="row">
                        <th scope="col" class="col-md-6">@Html.LabelFor(model => model.Enemies.FirstOrDefault().MonsterId, htmlAttributes: new { @class = "control-label" })</th>
                        <th scope="col" class="col-md-2">@Html.LabelFor(model => model.Enemies.FirstOrDefault().Level, htmlAttributes: new { @class = "control-label" })</th>
                        <th scope="col" class="col-md-2">@Html.LabelFor(model => model.Enemies.FirstOrDefault().ShardReward, htmlAttributes: new { @class = "control-label" })</th>
                        <th scope="col" class="col-md-2">
                            <input class="btn btn-primary btn-block" type="button" onclick="addEnnemyToRoom(this)" value="Add Ennemy" id="@roomId" />
                        </th>
                    </tr>
                </thead>
                <tbody id="enemy_list_@roomId">
                    @if (Model != null && Model.Enemies != null)
                    {
                        for (var i = 0; i < Model.Enemies.Count; i++)
                        {
                            Html.RenderPartial("EnemyPartial", Model.Enemies[i]);
                        }
                    }
                </tbody>
            </table>
        </td>

        <td class="col-md-2">
            <button type="button" class="close" aria-label="Close" onclick="$(this).parent().parent().remove();">
                <span aria-hidden="true">&times;</span>
            </button>
        </td>
    }
</tr>
