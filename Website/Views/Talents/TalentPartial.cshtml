@model Website.Models.TalentModel

@{
    var talentId = Guid.NewGuid();
}

<div id="talent-card-@talentId" class="col-md-6 mt-2">
    @using (Html.BeginCollectionItem($"Talents"))
    {
        @Html.HiddenFor(model => Model.Id)

        <div class="card card-dark">
            <div class="card-body">
                <div class="row mt-1">
                    <div class="col-md-12">
                        <div class="input-group input-group-sm">
                            <div class="input-group-prepend">
                                @Html.LabelFor(model => model.Branch, htmlAttributes: new { @class = "input-group-text" })
                            </div>
                            @Html.EditorFor(model => model.Branch, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.Branch, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-12 mt-1">
                        <div class="input-group input-group-sm">
                            <div class="input-group-prepend">
                                @Html.LabelFor(model => model.Leaf, htmlAttributes: new { @class = "input-group-text" })
                            </div>
                            @Html.EditorFor(model => model.Leaf, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.Leaf, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-12">
                        <div class="input-group input-group-sm">
                            <div class="input-group-prepend">
                                @Html.LabelFor(model => model.TargetInscription, htmlAttributes: new { @class = "input-group-text" })
                            </div>
                            @Html.DropDownListFor(model => model.TargetInscription, new SelectList(Model.Inscriptions, "Id", "Type"), new { @class = "form-control" })
                        </div>
                        @Html.ValidationMessageFor(model => model.TargetInscription, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-12 mt-1">
                        <div class="input-group input-group-sm">
                            <div class="input-group-prepend">
                                @Html.LabelFor(model => model.TalentPointsRequired, htmlAttributes: new { @class = "input-group-text" })
                            </div>
                            @Html.EditorFor(model => model.TalentPointsRequired, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.TalentPointsRequired, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-12 mt-1">
                        <div class="input-group input-group-sm">
                            <div class="input-group-prepend">
                                @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "input-group-text" })
                            </div>
                            @Html.EnumDropDownListFor(model => model.Type, new { @class = "form-control item-list-changer" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-12 mt-1">
                        <div class="input-group input-group-sm">
                            <div class="input-group-prepend">
                                @Html.LabelFor(model => model.Value, htmlAttributes: new { @class = "input-group-text" })
                            </div>
                            @Html.EditorFor(model => model.Value, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.Value, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <ul class="list-group list-group-flush">
                <li class="list-group-item">
                    <div class="row">
                        <div class="col-md-8">
                            <h5>@Html.LabelFor(model => model.Unlocks, htmlAttributes: new { @class = "control-label" })</h5>
                        </div>
                        <div class="col-md-4">
                            <input class="btn btn-block" type="button" onclick="addUnlockTypeToTalent(this)" value="<Add Type>" id="@talentId" />
                        </div>
                    </div>
                </li>
                <li class="list-group-item">
                    <div class="row" id="unlockTypeList_@talentId">
                        @if (Model != null && Model.Unlocks != null)
                        {
                            for (var i = 0; i < Model.Unlocks.Count; i++)
                            {
                                Html.RenderPartial("UnlockTypePartial", Model.Unlocks[i]);
                            }
                        }
                    </div>
                </li>
            </ul>
            <div class="card-footer">
                <button type="button" class="close" aria-label="Close" onclick="$(this).parent().parent().parent().remove();">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        </div>
    }
</div>